const THREE = require('three');
const { getTerrainParams } = require('./terrainAgent');

class TerrainGenerator {
    constructor() {
        this.strategies = new Map();
        this.registerDefaultStrategies();
        console.log('TerrainGenerator initialized with strategies:', Array.from(this.strategies.keys()));
    }

    registerDefaultStrategies() {
        this.strategies.set('procedural', this.proceduralTerrainStrategy.bind(this));
    }

    selectStrategy(features) {
        return this.strategies.get('procedural');
    }

    // Simplex noise implementation
    noise(x, y) {
        const X = Math.floor(x) & 255;
        const Y = Math.floor(y) & 255;
        x -= Math.floor(x);
        y -= Math.floor(y);
        const u = this.fade(x);
        const v = this.fade(y);
        const A = this.p[X] + Y;
        const B = this.p[X + 1] + Y;
        return this.lerp(v, this.lerp(u, this.grad(this.p[A], x, y), this.grad(this.p[B], x - 1, y)),
            this.lerp(u, this.grad(this.p[A + 1], x, y - 1), this.grad(this.p[B + 1], x - 1, y - 1)));
    }

    fade(t) {
        return t * t * t * (t * (t * 6 - 15) + 10);
    }

    lerp(t, a, b) {
        return a + t * (b - a);
    }

    grad(hash, x, y) {
        const h = hash & 15;
        const grad1 = (h & 8) ? x : y;
        const grad2 = (h & 4) ? ((h & 2) ? -x : x) : ((h & 2) ? -y : y);
        return grad1 + grad2;
    }

    // Initialize permutation table
    initNoise() {
        this.p = new Array(512);
        for (let i = 0; i < 256; i++) {
            this.p[i] = Math.floor(Math.random() * 256);
        }
        for (let i = 0; i < 256; i++) {
            this.p[256 + i] = this.p[i];
        }
    }

    async generateFromDescription(description) {
        try {
            console.log('Analyzing terrain description...');
            const params = await getTerrainParams(description);
            console.log('Terrain parameters:', JSON.stringify(params, null, 2));

            // Ensure required parameters are present
            if (!params.width || !params.height) {
                params.width = 64;  // Default size
                params.height = 64;
            }
            if (!params.scale) params.scale = 1.0;
            if (!params.roughness) params.roughness = 0.5;
            if (!params.heightScale) params.heightScale = 1.0;
            if (!params.resolution) params.resolution = 1.0;

            const strategy = this.selectStrategy(params.features || []);
            console.log('Selected strategy:', strategy.name);

            console.log('Generating heightmap with params:', {
                width: params.width,
                height: params.height,
                scale: params.scale,
                roughness: params.roughness
            });

            const heightmap = await strategy(params);
            console.log('Heightmap generated:', {
                type: typeof heightmap,
                isArray: Array.isArray(heightmap),
                length: heightmap?.length,
                sample: heightmap?.slice(0, 5)
            });

            if (!heightmap || !Array.isArray(heightmap)) {
                throw new Error('Invalid heightmap generated by strategy');
            }

            console.log('Creating terrain geometry...');
            const geometry = this.createTerrainGeometry(heightmap, params);
            console.log('Terrain geometry created successfully');

            return geometry;
        } catch (error) {
            console.error('Error in generateFromDescription:', error);
            throw error;
        }
    }

    async proceduralTerrainStrategy(params) {
        const { width, height, scale, roughness, heightScale } = params;
        this.initNoise();

        const heightmap = new Float32Array(width * height);
        
        // Use parameters from terrainAgent instead of hardcoded values
        const {
            noiseIterations,
            positionFrequency,
            warpFrequency,
            warpStrength,
            strength
        } = params;

        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                let elevation = 0;
                const warpedX = x + this.noise(x * positionFrequency * warpFrequency, y * positionFrequency * warpFrequency) * warpStrength;
                const warpedY = y + this.noise(x * positionFrequency * warpFrequency, y * positionFrequency * warpFrequency) * warpStrength;

                // Multiple octaves of noise
                for (let i = 1; i <= noiseIterations; i++) {
                    const frequency = positionFrequency * i * 2;
                    const amplitude = 1 / (i * 2);
                    elevation += this.noise(warpedX * frequency, warpedY * frequency) * amplitude;
                }

                // Apply strength and sign
                elevation = Math.sign(elevation) * Math.pow(Math.abs(elevation), 2) * strength;
                
                // Normalize to 0-1 range
                elevation = (elevation + strength) / (strength * 2);
                
                heightmap[y * width + x] = elevation;
            }
        }

        return Array.from(heightmap);
    }

    createTerrainGeometry(heightmap, params) {
        const { width, height, resolution, heightScale } = params;
        console.log('Creating terrain geometry with params:', { width, height, resolution, heightScale });
        
        const geometry = new THREE.PlaneGeometry(
            width * resolution,
            height * resolution,
            width - 1,
            height - 1
        );

        // Apply heightmap to vertices
        const vertices = geometry.attributes.position.array;
        for (let i = 0; i < vertices.length; i += 3) {
            const x = Math.floor((i / 3) % width);
            const y = Math.floor((i / 3) / width);
            vertices[i + 2] = heightmap[y * width + x] * heightScale;
        }

        // Compute vertex normals for proper lighting
        geometry.computeVertexNormals();
        
        // Optimize geometry
        geometry.computeBoundingSphere();
        geometry.computeBoundingBox();

        // Include material parameters in the serialized geometry
        const serialized = this.serializeGeometry(geometry);
        serialized.material = {
            colorSand: params.colorSand,
            colorGrass: params.colorGrass,
            colorSnow: params.colorSnow,
            colorRock: params.colorRock
        };

        return serialized;
    }

    serializeGeometry(geometry) {
        return {
            positions: Array.from(geometry.attributes.position.array),
            normals: Array.from(geometry.attributes.normal.array),
            indices: Array.from(geometry.index.array),
            uvs: Array.from(geometry.attributes.uv.array),
            width: geometry.parameters.width,
            height: geometry.parameters.height,
            boundingSphere: {
                center: geometry.boundingSphere.center.toArray(),
                radius: geometry.boundingSphere.radius
            },
            boundingBox: {
                min: geometry.boundingBox.min.toArray(),
                max: geometry.boundingBox.max.toArray()
            }
        };
    }
}

// Create and export a single instance
const terrainGenerator = new TerrainGenerator();
module.exports = terrainGenerator; 